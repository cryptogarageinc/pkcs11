// Code generated by MockGen. DO NOT EDIT.
// Source: pkcs11.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pkcs11 "github.com/cryptogarageinc/pkcs11"
	gomock "github.com/golang/mock/gomock"
)

// MockPkcs11 is a mock of Pkcs11 interface.
type MockPkcs11 struct {
	ctrl     *gomock.Controller
	recorder *MockPkcs11MockRecorder
}

// MockPkcs11MockRecorder is the mock recorder for MockPkcs11.
type MockPkcs11MockRecorder struct {
	mock *MockPkcs11
}

// NewMockPkcs11 creates a new mock instance.
func NewMockPkcs11(ctrl *gomock.Controller) *MockPkcs11 {
	mock := &MockPkcs11{ctrl: ctrl}
	mock.recorder = &MockPkcs11MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPkcs11) EXPECT() *MockPkcs11MockRecorder {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MockPkcs11) CloseSession(ctx context.Context, session pkcs11.SessionHandle) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSession", ctx, session)
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockPkcs11MockRecorder) CloseSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockPkcs11)(nil).CloseSession), ctx, session)
}

// DeriveKeyPair mocks base method.
func (m *MockPkcs11) DeriveKeyPair(ctx context.Context, session pkcs11.SessionHandle, masterXprivHandle pkcs11.ObjectHandle, path []uint32) (pkcs11.ObjectHandle, pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveKeyPair", ctx, session, masterXprivHandle, path)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(pkcs11.ObjectHandle)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeriveKeyPair indicates an expected call of DeriveKeyPair.
func (mr *MockPkcs11MockRecorder) DeriveKeyPair(ctx, session, masterXprivHandle, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveKeyPair", reflect.TypeOf((*MockPkcs11)(nil).DeriveKeyPair), ctx, session, masterXprivHandle, path)
}

// Finalize mocks base method.
func (m *MockPkcs11) Finalize(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize", ctx)
}

// Finalize indicates an expected call of Finalize.
func (mr *MockPkcs11MockRecorder) Finalize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockPkcs11)(nil).Finalize), ctx)
}

// FindKeyByLabel mocks base method.
func (m *MockPkcs11) FindKeyByLabel(ctx context.Context, session pkcs11.SessionHandle, label string) (pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindKeyByLabel", ctx, session, label)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindKeyByLabel indicates an expected call of FindKeyByLabel.
func (mr *MockPkcs11MockRecorder) FindKeyByLabel(ctx, session, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindKeyByLabel", reflect.TypeOf((*MockPkcs11)(nil).FindKeyByLabel), ctx, session, label)
}

// GenerateSignature mocks base method.
func (m *MockPkcs11) GenerateSignature(ctx context.Context, session pkcs11.SessionHandle, privkeyHandle pkcs11.ObjectHandle, mechanismType uint, message []byte) ([64]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignature", ctx, session, privkeyHandle, mechanismType, message)
	ret0, _ := ret[0].([64]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSignature indicates an expected call of GenerateSignature.
func (mr *MockPkcs11MockRecorder) GenerateSignature(ctx, session, privkeyHandle, mechanismType, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignature", reflect.TypeOf((*MockPkcs11)(nil).GenerateSignature), ctx, session, privkeyHandle, mechanismType, message)
}

// GetPublicKey mocks base method.
func (m *MockPkcs11) GetPublicKey(ctx context.Context, session pkcs11.SessionHandle, pubkeyHandle pkcs11.ObjectHandle) ([65]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, session, pubkeyHandle)
	ret0, _ := ret[0].([65]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockPkcs11MockRecorder) GetPublicKey(ctx, session, pubkeyHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockPkcs11)(nil).GetPublicKey), ctx, session, pubkeyHandle)
}

// Initialize mocks base method.
func (m *MockPkcs11) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockPkcs11MockRecorder) Initialize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockPkcs11)(nil).Initialize), ctx)
}

// OpenSession mocks base method.
func (m *MockPkcs11) OpenSession(ctx context.Context, pin string) (pkcs11.SessionHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", ctx, pin)
	ret0, _ := ret[0].(pkcs11.SessionHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockPkcs11MockRecorder) OpenSession(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockPkcs11)(nil).OpenSession), ctx, pin)
}

// OpenSessionWithPartition mocks base method.
func (m *MockPkcs11) OpenSessionWithPartition(ctx context.Context, partitionID uint, pin string) (pkcs11.SessionHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSessionWithPartition", ctx, partitionID, pin)
	ret0, _ := ret[0].(pkcs11.SessionHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSessionWithPartition indicates an expected call of OpenSessionWithPartition.
func (mr *MockPkcs11MockRecorder) OpenSessionWithPartition(ctx, partitionID, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSessionWithPartition", reflect.TypeOf((*MockPkcs11)(nil).OpenSessionWithPartition), ctx, partitionID, pin)
}
