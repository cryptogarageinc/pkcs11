// Code generated by MockGen. DO NOT EDIT.
// Source: pkcs11.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pkcs11 "github.com/cryptogarageinc/pkcs11"
	pkcs110 "github.com/cryptogarageinc/pkcs11/apis/pkcs11"
	gomock "go.uber.org/mock/gomock"
)

// MockPkcs11 is a mock of Pkcs11 interface.
type MockPkcs11 struct {
	ctrl     *gomock.Controller
	recorder *MockPkcs11MockRecorder
}

// MockPkcs11MockRecorder is the mock recorder for MockPkcs11.
type MockPkcs11MockRecorder struct {
	mock *MockPkcs11
}

// NewMockPkcs11 creates a new mock instance.
func NewMockPkcs11(ctrl *gomock.Controller) *MockPkcs11 {
	mock := &MockPkcs11{ctrl: ctrl}
	mock.recorder = &MockPkcs11MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPkcs11) EXPECT() *MockPkcs11MockRecorder {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MockPkcs11) CloseSession(ctx context.Context, session pkcs11.SessionHandle) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSession", ctx, session)
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockPkcs11MockRecorder) CloseSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockPkcs11)(nil).CloseSession), ctx, session)
}

// CloseSessionAll mocks base method.
func (m *MockPkcs11) CloseSessionAll(ctx context.Context, slotID uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseSessionAll", ctx, slotID)
}

// CloseSessionAll indicates an expected call of CloseSessionAll.
func (mr *MockPkcs11MockRecorder) CloseSessionAll(ctx, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSessionAll", reflect.TypeOf((*MockPkcs11)(nil).CloseSessionAll), ctx, slotID)
}

// CreateXprivFromSeed mocks base method.
func (m *MockPkcs11) CreateXprivFromSeed(ctx context.Context, session pkcs11.SessionHandle, seedHandle pkcs11.ObjectHandle, xpubLabel, xprivLabel string, canExport bool) (pkcs11.ObjectHandle, pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateXprivFromSeed", ctx, session, seedHandle, xpubLabel, xprivLabel, canExport)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(pkcs11.ObjectHandle)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateXprivFromSeed indicates an expected call of CreateXprivFromSeed.
func (mr *MockPkcs11MockRecorder) CreateXprivFromSeed(ctx, session, seedHandle, xpubLabel, xprivLabel, canExport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXprivFromSeed", reflect.TypeOf((*MockPkcs11)(nil).CreateXprivFromSeed), ctx, session, seedHandle, xpubLabel, xprivLabel, canExport)
}

// DeriveKeyPair mocks base method.
func (m *MockPkcs11) DeriveKeyPair(ctx context.Context, session pkcs11.SessionHandle, masterXprivHandle pkcs11.ObjectHandle, path []uint32) (pkcs11.ObjectHandle, pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveKeyPair", ctx, session, masterXprivHandle, path)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(pkcs11.ObjectHandle)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeriveKeyPair indicates an expected call of DeriveKeyPair.
func (mr *MockPkcs11MockRecorder) DeriveKeyPair(ctx, session, masterXprivHandle, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveKeyPair", reflect.TypeOf((*MockPkcs11)(nil).DeriveKeyPair), ctx, session, masterXprivHandle, path)
}

// ExportXpriv mocks base method.
func (m *MockPkcs11) ExportXpriv(ctx context.Context, session pkcs11.SessionHandle, xprivHandle pkcs11.ObjectHandle) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportXpriv", ctx, session, xprivHandle)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportXpriv indicates an expected call of ExportXpriv.
func (mr *MockPkcs11MockRecorder) ExportXpriv(ctx, session, xprivHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportXpriv", reflect.TypeOf((*MockPkcs11)(nil).ExportXpriv), ctx, session, xprivHandle)
}

// Finalize mocks base method.
func (m *MockPkcs11) Finalize(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalize", ctx)
}

// Finalize indicates an expected call of Finalize.
func (mr *MockPkcs11MockRecorder) Finalize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockPkcs11)(nil).Finalize), ctx)
}

// FindKeyByLabel mocks base method.
func (m *MockPkcs11) FindKeyByLabel(ctx context.Context, session pkcs11.SessionHandle, label string) (pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindKeyByLabel", ctx, session, label)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindKeyByLabel indicates an expected call of FindKeyByLabel.
func (mr *MockPkcs11MockRecorder) FindKeyByLabel(ctx, session, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindKeyByLabel", reflect.TypeOf((*MockPkcs11)(nil).FindKeyByLabel), ctx, session, label)
}

// GenerateSeed mocks base method.
func (m *MockPkcs11) GenerateSeed(ctx context.Context, session pkcs11.SessionHandle, label string, length uint) (pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSeed", ctx, session, label, length)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSeed indicates an expected call of GenerateSeed.
func (mr *MockPkcs11MockRecorder) GenerateSeed(ctx, session, label, length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSeed", reflect.TypeOf((*MockPkcs11)(nil).GenerateSeed), ctx, session, label, length)
}

// GenerateSignature mocks base method.
func (m *MockPkcs11) GenerateSignature(ctx context.Context, session pkcs11.SessionHandle, privkeyHandle pkcs11.ObjectHandle, mechanismType uint, message []byte) (pkcs110.SignatureBytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignature", ctx, session, privkeyHandle, mechanismType, message)
	ret0, _ := ret[0].(pkcs110.SignatureBytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSignature indicates an expected call of GenerateSignature.
func (mr *MockPkcs11MockRecorder) GenerateSignature(ctx, session, privkeyHandle, mechanismType, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignature", reflect.TypeOf((*MockPkcs11)(nil).GenerateSignature), ctx, session, privkeyHandle, mechanismType, message)
}

// GetCurrentSlot mocks base method.
func (m *MockPkcs11) GetCurrentSlot() (uint, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSlot")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCurrentSlot indicates an expected call of GetCurrentSlot.
func (mr *MockPkcs11MockRecorder) GetCurrentSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSlot", reflect.TypeOf((*MockPkcs11)(nil).GetCurrentSlot))
}

// GetPkcs11Context mocks base method.
func (m *MockPkcs11) GetPkcs11Context() *pkcs11.Ctx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPkcs11Context")
	ret0, _ := ret[0].(*pkcs11.Ctx)
	return ret0
}

// GetPkcs11Context indicates an expected call of GetPkcs11Context.
func (mr *MockPkcs11MockRecorder) GetPkcs11Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPkcs11Context", reflect.TypeOf((*MockPkcs11)(nil).GetPkcs11Context))
}

// GetPublicKey mocks base method.
func (m *MockPkcs11) GetPublicKey(ctx context.Context, session pkcs11.SessionHandle, pubkeyHandle pkcs11.ObjectHandle) (pkcs110.PublicKeyBytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, session, pubkeyHandle)
	ret0, _ := ret[0].(pkcs110.PublicKeyBytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockPkcs11MockRecorder) GetPublicKey(ctx, session, pubkeyHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockPkcs11)(nil).GetPublicKey), ctx, session, pubkeyHandle)
}

// ImportSeed mocks base method.
func (m *MockPkcs11) ImportSeed(ctx context.Context, session pkcs11.SessionHandle, seedBytes []byte, label string) (pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSeed", ctx, session, seedBytes, label)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSeed indicates an expected call of ImportSeed.
func (mr *MockPkcs11MockRecorder) ImportSeed(ctx, session, seedBytes, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSeed", reflect.TypeOf((*MockPkcs11)(nil).ImportSeed), ctx, session, seedBytes, label)
}

// ImportXpriv mocks base method.
func (m *MockPkcs11) ImportXpriv(ctx context.Context, session pkcs11.SessionHandle, xpriv, label string, canExport bool) (pkcs11.ObjectHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportXpriv", ctx, session, xpriv, label, canExport)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportXpriv indicates an expected call of ImportXpriv.
func (mr *MockPkcs11MockRecorder) ImportXpriv(ctx, session, xpriv, label, canExport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportXpriv", reflect.TypeOf((*MockPkcs11)(nil).ImportXpriv), ctx, session, xpriv, label, canExport)
}

// Initialize mocks base method.
func (m *MockPkcs11) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockPkcs11MockRecorder) Initialize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockPkcs11)(nil).Initialize), ctx)
}

// OpenSession mocks base method.
func (m *MockPkcs11) OpenSession(ctx context.Context, pin string) (pkcs11.SessionHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", ctx, pin)
	ret0, _ := ret[0].(pkcs11.SessionHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockPkcs11MockRecorder) OpenSession(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockPkcs11)(nil).OpenSession), ctx, pin)
}

// OpenSessionWithPartitionAndSlot mocks base method.
func (m *MockPkcs11) OpenSessionWithPartitionAndSlot(ctx context.Context, slotID, partitionID uint, pin string) (pkcs11.SessionHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSessionWithPartitionAndSlot", ctx, slotID, partitionID, pin)
	ret0, _ := ret[0].(pkcs11.SessionHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSessionWithPartitionAndSlot indicates an expected call of OpenSessionWithPartitionAndSlot.
func (mr *MockPkcs11MockRecorder) OpenSessionWithPartitionAndSlot(ctx, slotID, partitionID, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSessionWithPartitionAndSlot", reflect.TypeOf((*MockPkcs11)(nil).OpenSessionWithPartitionAndSlot), ctx, slotID, partitionID, pin)
}

// ReLogin mocks base method.
func (m *MockPkcs11) ReLogin(ctx context.Context, session pkcs11.SessionHandle, pin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReLogin", ctx, session, pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReLogin indicates an expected call of ReLogin.
func (mr *MockPkcs11MockRecorder) ReLogin(ctx, session, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReLogin", reflect.TypeOf((*MockPkcs11)(nil).ReLogin), ctx, session, pin)
}
